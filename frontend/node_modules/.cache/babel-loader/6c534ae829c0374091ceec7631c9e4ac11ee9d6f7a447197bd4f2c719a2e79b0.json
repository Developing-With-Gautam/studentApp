{"ast":null,"code":"var _jsxFileName = \"/Users/gautamyadav/Student Check-in System/frontend/src/components/CheckInForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { API_URL } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CheckInForm({\n  onCheckIn\n}) {\n  _s();\n  const [studentId, setStudentId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const handleCheckIn = async () => {\n    if (!studentId) return;\n    setLoading(true);\n    setError(\"\");\n    try {\n      const res = await fetch(`${API_URL}/checkin`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          student_id: studentId\n        })\n      });\n      if (!res.ok) throw new Error(\"Check-in failed\");\n      const data = await res.json();\n      onCheckIn(data);\n      setStudentId(\"\");\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Check In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Student ID\",\n      value: studentId,\n      onChange: e => setStudentId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheckIn,\n      disabled: loading,\n      children: loading ? \"Checking in...\" : \"Check In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckInForm, \"dufih0lFs9ftxroN27ayaHxc+Gg=\");\n_c = CheckInForm;\nexport default CheckInForm;\nvar _c;\n$RefreshReg$(_c, \"CheckInForm\");","map":{"version":3,"names":["React","useState","API_URL","jsxDEV","_jsxDEV","CheckInForm","onCheckIn","_s","studentId","setStudentId","loading","setLoading","error","setError","handleCheckIn","res","fetch","method","headers","body","JSON","stringify","student_id","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["/Users/gautamyadav/Student Check-in System/frontend/src/components/CheckInForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { API_URL } from \"../api\";\n\nfunction CheckInForm({ onCheckIn }) {\n  const [studentId, setStudentId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleCheckIn = async () => {\n    if (!studentId) return;\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const res = await fetch(`${API_URL}/checkin`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ student_id: studentId }),\n      });\n\n      if (!res.ok) throw new Error(\"Check-in failed\");\n\n      const data = await res.json();\n      onCheckIn(data);\n      setStudentId(\"\");\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Check In</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Student ID\"\n        value={studentId}\n        onChange={(e) => setStudentId(e.target.value)}\n      />\n      <button onClick={handleCheckIn} disabled={loading}>\n        {loading ? \"Checking in...\" : \"Check In\"}\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n}\n\nexport default CheckInForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,WAAWA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACN,SAAS,EAAE;IAChBG,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGd,OAAO,UAAU,EAAE;QAC5Ce,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,UAAU,EAAEd;QAAU,CAAC;MAChD,CAAC,CAAC;MAEF,IAAI,CAACO,GAAG,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MAE/C,MAAMC,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;MAC7BpB,SAAS,CAACmB,IAAI,CAAC;MACfhB,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,CAAC,OAAOkB,GAAG,EAAE;MACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRjB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEP,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB7B,OAAA;MACE8B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,YAAY;MACxBC,KAAK,EAAE5B,SAAU;MACjB6B,QAAQ,EAAGC,CAAC,IAAK7B,YAAY,CAAC6B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACF7B,OAAA;MAAQoC,OAAO,EAAE1B,aAAc;MAAC2B,QAAQ,EAAE/B,OAAQ;MAAAmB,QAAA,EAC/CnB,OAAO,GAAG,gBAAgB,GAAG;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EACRrB,KAAK,iBAAIR,OAAA;MAAGsC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAd,QAAA,EAAEjB;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAAC1B,EAAA,CA5CQF,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AA8CpB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}